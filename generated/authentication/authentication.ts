/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Store
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  LoginRequest,
  User
} from '../store.schemas';

import { customInstance } from '../../lib/custom-instance';
import type { ErrorType, BodyType } from '../../lib/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Login user and return JWT token
 */
export const postLogin = (
    loginRequest: BodyType<LoginRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<User>(
      {url: `/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequest, signal
    },
      options);
    }
  


export const getPostLoginMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLogin>>, TError,{data: BodyType<LoginRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postLogin>>, TError,{data: BodyType<LoginRequest>}, TContext> => {
    
const mutationKey = ['postLogin'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLogin>>, {data: BodyType<LoginRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postLogin(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postLogin>>>
    export type PostLoginMutationBody = BodyType<LoginRequest>
    export type PostLoginMutationError = ErrorType<void>

    /**
 * @summary Login user and return JWT token
 */
export const usePostLogin = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLogin>>, TError,{data: BodyType<LoginRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof postLogin>>,
        TError,
        {data: BodyType<LoginRequest>},
        TContext
      > => {

      const mutationOptions = getPostLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Logout user and revoke JWT token
 */
export const deleteLogout = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/logout`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteLogoutMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLogout>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteLogout>>, TError,void, TContext> => {
    
const mutationKey = ['deleteLogout'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteLogout>>, void> = () => {
          

          return  deleteLogout(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLogout>>>
    
    export type DeleteLogoutMutationError = ErrorType<void>

    /**
 * @summary Logout user and revoke JWT token
 */
export const useDeleteLogout = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLogout>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteLogout>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteLogoutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    