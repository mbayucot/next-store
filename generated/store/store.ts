/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Store
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetStoresParams,
  Store,
  StoreCreate,
  StoreListResponse
} from '../store.schemas';

import { customInstance } from '../../lib/custom-instance';
import type { ErrorType, BodyType } from '../../lib/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Get all stores with pagination and search
 */
export const getStores = (
    params?: GetStoresParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<StoreListResponse>(
      {url: `/stores`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetStoresQueryKey = (params?: GetStoresParams,) => {
    return [`/stores`, ...(params ? [params]: [])] as const;
    }

    
export const getGetStoresQueryOptions = <TData = Awaited<ReturnType<typeof getStores>>, TError = ErrorType<unknown>>(params?: GetStoresParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStores>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStoresQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStores>>> = ({ signal }) => getStores(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStores>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetStoresQueryResult = NonNullable<Awaited<ReturnType<typeof getStores>>>
export type GetStoresQueryError = ErrorType<unknown>


export function useGetStores<TData = Awaited<ReturnType<typeof getStores>>, TError = ErrorType<unknown>>(
 params: undefined |  GetStoresParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStores>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStores>>,
          TError,
          Awaited<ReturnType<typeof getStores>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStores<TData = Awaited<ReturnType<typeof getStores>>, TError = ErrorType<unknown>>(
 params?: GetStoresParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStores>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStores>>,
          TError,
          Awaited<ReturnType<typeof getStores>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStores<TData = Awaited<ReturnType<typeof getStores>>, TError = ErrorType<unknown>>(
 params?: GetStoresParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStores>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all stores with pagination and search
 */

export function useGetStores<TData = Awaited<ReturnType<typeof getStores>>, TError = ErrorType<unknown>>(
 params?: GetStoresParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStores>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetStoresQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new store
 */
export const postStores = (
    storeCreate: BodyType<StoreCreate>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Store>(
      {url: `/stores`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: storeCreate, signal
    },
      options);
    }
  


export const getPostStoresMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStores>>, TError,{data: BodyType<StoreCreate>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postStores>>, TError,{data: BodyType<StoreCreate>}, TContext> => {
    
const mutationKey = ['postStores'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postStores>>, {data: BodyType<StoreCreate>}> = (props) => {
          const {data} = props ?? {};

          return  postStores(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostStoresMutationResult = NonNullable<Awaited<ReturnType<typeof postStores>>>
    export type PostStoresMutationBody = BodyType<StoreCreate>
    export type PostStoresMutationError = ErrorType<unknown>

    /**
 * @summary Create a new store
 */
export const usePostStores = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStores>>, TError,{data: BodyType<StoreCreate>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof postStores>>,
        TError,
        {data: BodyType<StoreCreate>},
        TContext
      > => {

      const mutationOptions = getPostStoresMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get store by ID
 */
export const getStoresId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Store>(
      {url: `/stores/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetStoresIdQueryKey = (id: number,) => {
    return [`/stores/${id}`] as const;
    }

    
export const getGetStoresIdQueryOptions = <TData = Awaited<ReturnType<typeof getStoresId>>, TError = ErrorType<void>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStoresId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStoresIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStoresId>>> = ({ signal }) => getStoresId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStoresId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetStoresIdQueryResult = NonNullable<Awaited<ReturnType<typeof getStoresId>>>
export type GetStoresIdQueryError = ErrorType<void>


export function useGetStoresId<TData = Awaited<ReturnType<typeof getStoresId>>, TError = ErrorType<void>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStoresId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStoresId>>,
          TError,
          Awaited<ReturnType<typeof getStoresId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStoresId<TData = Awaited<ReturnType<typeof getStoresId>>, TError = ErrorType<void>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStoresId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStoresId>>,
          TError,
          Awaited<ReturnType<typeof getStoresId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStoresId<TData = Awaited<ReturnType<typeof getStoresId>>, TError = ErrorType<void>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStoresId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get store by ID
 */

export function useGetStoresId<TData = Awaited<ReturnType<typeof getStoresId>>, TError = ErrorType<void>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStoresId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetStoresIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a store by ID
 */
export const putStoresId = (
    id: number,
    storeCreate: BodyType<StoreCreate>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<Store>(
      {url: `/stores/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: storeCreate
    },
      options);
    }
  


export const getPutStoresIdMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStoresId>>, TError,{id: number;data: BodyType<StoreCreate>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putStoresId>>, TError,{id: number;data: BodyType<StoreCreate>}, TContext> => {
    
const mutationKey = ['putStoresId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putStoresId>>, {id: number;data: BodyType<StoreCreate>}> = (props) => {
          const {id,data} = props ?? {};

          return  putStoresId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutStoresIdMutationResult = NonNullable<Awaited<ReturnType<typeof putStoresId>>>
    export type PutStoresIdMutationBody = BodyType<StoreCreate>
    export type PutStoresIdMutationError = ErrorType<void>

    /**
 * @summary Update a store by ID
 */
export const usePutStoresId = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStoresId>>, TError,{id: number;data: BodyType<StoreCreate>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof putStoresId>>,
        TError,
        {id: number;data: BodyType<StoreCreate>},
        TContext
      > => {

      const mutationOptions = getPutStoresIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete a store by ID
 */
export const deleteStoresId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/stores/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteStoresIdMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteStoresId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteStoresId>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteStoresId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteStoresId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteStoresId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteStoresIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteStoresId>>>
    
    export type DeleteStoresIdMutationError = ErrorType<void>

    /**
 * @summary Delete a store by ID
 */
export const useDeleteStoresId = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteStoresId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteStoresId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteStoresIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    